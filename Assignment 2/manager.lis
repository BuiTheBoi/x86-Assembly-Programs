     1                                  ;=====================================================================================================================================
     2                                  ;Program Name: Arrays
     3                                  ;Programming Language: x86 Assembly
     4                                  ;File Description: manager.asm is called by the main driver file. This calls all other functions defined in input_array.asm, sum.asm,
     5                                  ;display_array.cpp, atol.asm, and isinteger.cpp.
     6                                  
     7                                  
     8                                  ;Author: Justin Bui
     9                                  ;Email: Justin_Bui12@csu.fullerton.edu
    10                                  ;Institution: California State University, Fullerton
    11                                  ;Course: CPSC 240-05
    12                                  ;Start Date: 18 September, 2020
    13                                  
    14                                  ;Copyright (C) 2020 Justin Bui
    15                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
    16                                  ;version 3 as published by the Free Software Foundation.
    17                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
    18                                  ;Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
    19                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.
    20                                  ;======================================================================================================================================
    21                                  
    22                                  
    23                                  extern printf
    24                                  extern takeInput		;From input_array.asm
    25                                  extern printArray		;From display_array.cpp
    26                                  extern doAddition		;From sum.asm
    27                                  global determineSum
    28                                  
    29                                  
    30                                  section .data
    31 00000000 546869732070726F67-     	introduce db "This program will sum your array of integers.", 10, 0
    31 00000009 72616D2077696C6C20-
    31 00000012 73756D20796F757220-
    31 0000001B 6172726179206F6620-
    31 00000024 696E7465676572732E-
    31 0000002D 0A00               
    32 0000002F 456E74657220612073-     	enterIntegers db "Enter a sequence of long integers separated by white space.", 10, 0
    32 00000038 657175656E6365206F-
    32 00000041 66206C6F6E6720696E-
    32 0000004A 746567657273207365-
    32 00000053 706172617465642062-
    32 0000005C 792077686974652073-
    32 00000065 706163652E0A00     
    33 0000006C 416674657220746865-     	controlD db "After the last input press enter followed by Control+D: ", 10, 0
    33 00000075 206C61737420696E70-
    33 0000007E 757420707265737320-
    33 00000087 656E74657220666F6C-
    33 00000090 6C6F77656420627920-
    33 00000099 436F6E74726F6C2B44-
    33 000000A2 3A200A00           
    34 000000A6 5468657365206E756D-     	numbersReceived db "These numbers were received and placed into the array: ", 10, 0
    34 000000AF 626572732077657265-
    34 000000B8 207265636569766564-
    34 000000C1 20616E6420706C6163-
    34 000000CA 656420696E746F2074-
    34 000000D3 68652061727261793A-
    34 000000DC 200A00             
    35 000000DF 5468652073756D206F-     	intOutputFormat1 db "The sum of the %ld numbers in this array is ", 0
    35 000000E8 662074686520256C64-
    35 000000F1 206E756D6265727320-
    35 000000FA 696E20746869732061-
    35 00000103 727261792069732000 
    36 0000010C 256C640A00              	intOutputFormat2 db "%ld", 10, 0
    37 00000111 5468652073756D2077-     	outro db "The sum will now be returned to the main function", 10, 0
    37 0000011A 696C6C206E6F772062-
    37 00000123 652072657475726E65-
    37 0000012C 6420746F2074686520-
    37 00000135 6D61696E2066756E63-
    37 0000013E 74696F6E0A00       
    38 00000144 257300                  	stringOutputFormat db "%s", 0
    39                                  
    40                                  
    41                                  section .bss
    42 00000000 <res 00000320>          	myArray: resq 100
    43                                  
    44                                  section .text
    45                                  
    46                                  determineSum:
    47 00000000 55                      	push rbp                                                    ;Backup rbp
    48 00000001 4889E5                  	mov  rbp,rsp                                                ;The base pointer now points to top of stack
    49 00000004 57                      	push rdi                                                    ;Backup rdi
    50 00000005 56                      	push rsi                                                    ;Backup rsi
    51 00000006 52                      	push rdx                                                    ;Backup rdx
    52 00000007 51                      	push rcx                                                    ;Backup rcx
    53 00000008 4150                    	push r8                                                     ;Backup r8
    54 0000000A 4151                    	push r9                                                     ;Backup r9
    55 0000000C 4152                    	push r10                                                    ;Backup r10
    56 0000000E 4153                    	push r11                                                    ;Backup r11
    57 00000010 4154                    	push r12                                                    ;Backup r12
    58 00000012 4155                    	push r13                                                    ;Backup r13
    59 00000014 4156                    	push r14                                                    ;Backup r14
    60 00000016 4157                    	push r15                                                    ;Backup r15
    61 00000018 53                      	push rbx                                                    ;Backup rbx
    62 00000019 9C                      	pushf                                                       ;Backup rflags
    63                                  
    64                                  promptUser:
    65                                  
    66                                  	;Introducing what this program will do
    67 0000001A 48BF-                   	mov rdi, stringOutputFormat
    67 0000001C [4401000000000000] 
    68 00000024 48BE-                   	mov rsi, introduce
    68 00000026 [0000000000000000] 
    69 0000002E B800000000              	mov rax, 0
    70 00000033 E8(00000000)            	call printf
    71                                  
    72                                  	;Instructing user to enter a sequence of long integers separated by white space
    73 00000038 48BF-                   	mov rdi, stringOutputFormat
    73 0000003A [4401000000000000] 
    74 00000042 48BE-                   	mov rsi, enterIntegers
    74 00000044 [2F00000000000000] 
    75 0000004C B800000000              	mov rax, 0
    76 00000051 E8(00000000)            	call printf
    77                                  
    78                                  	;Instructing user to press ctrl+D when completed
    79 00000056 48BF-                   	mov rdi, stringOutputFormat
    79 00000058 [4401000000000000] 
    80 00000060 48BE-                   	mov rsi, controlD
    80 00000062 [6C00000000000000] 
    81 0000006A B800000000              	mov rax, 0
    82 0000006F E8(00000000)            	call printf
    83                                  
    84                                  	;manager.asm now calls input_array.asm
    85 00000074 B800000000              	mov rax, 0
    86 00000079 48BF-                   	mov rdi, myArray			;Passes myArray into rdi
    86 0000007B [0000000000000000] 
    87 00000083 BE64000000              	mov rsi, 100				;Passes max amt of qwords of myArray
    88 00000088 E8(00000000)            	call takeInput				;Calling takeInput from array_input.asm
    89 0000008D 4989C4                  	mov r12, rax				;Passing current size of array into r12
    90                                  
    91                                  	;manager.asm now calls sum.asm
    92 00000090 B800000000              	mov rax, 0
    93 00000095 48BF-                   	mov rdi, myArray			;Passing in myArray (Like above block)
    93 00000097 [0000000000000000] 
    94 0000009F 4C89E6                  	mov rsi, r12				;Passing in current size of array
    95 000000A2 E8(00000000)            	call doAddition				;Calling doAddition from sum.asm
    96 000000A7 4989C5                  	mov r13, rax				;Returning calculated sum
    97                                  
    98                                  printResults:
    99                                  
   100                                  	;Printing out what the user inputed
   101 000000AA 48BF-                   	mov rdi, stringOutputFormat
   101 000000AC [4401000000000000] 
   102 000000B4 48BE-                   	mov rsi, numbersReceived
   102 000000B6 [A600000000000000] 
   103 000000BE B800000000              	mov qword rax, 0
   104 000000C3 E8(00000000)            	call printf
   105                                  
   106                                  	;manager.asm now calls display_array.cpp
   107 000000C8 B800000000              	mov qword rax, 0
   108 000000CD 48BF-                   	mov rdi, myArray			;Passing in myArray as 1st parameter to the c++ function
   108 000000CF [0000000000000000] 
   109 000000D7 4C89E6                  	mov rsi, r12				;Passing current size of array as 2nd parameter
   110 000000DA E8(00000000)            	call printArray				;Calling printArray from display_array.cpp
   111                                  
   112                                  	;Prints number of elements in array and sum
   113 000000DF B800000000              	mov rax, 0
   114 000000E4 48BF-                   	mov rdi, intOutputFormat1
   114 000000E6 [DF00000000000000] 
   115 000000EE 4C89E6                  	mov rsi, r12
   116 000000F1 E8(00000000)            	call printf
   117                                  
   118 000000F6 B800000000              	mov rax, 0
   119 000000FB 48BF-                   	mov rdi, intOutputFormat2
   119 000000FD [0C01000000000000] 
   120 00000105 4C89EE                  	mov rsi, r13
   121 00000108 E8(00000000)            	call printf
   122                                  
   123                                  endManager:
   124                                  
   125 0000010D B800000000              	mov rax, 0
   126 00000112 48BF-                   	mov rdi, stringOutputFormat
   126 00000114 [4401000000000000] 
   127 0000011C 48BE-                   	mov rsi, outro
   127 0000011E [1101000000000000] 
   128 00000126 E8(00000000)            	call printf
   129                                  
   130 0000012B 4155                    	push r13
   131                                  
   132 0000012D 58                      	pop rax                                                     ;Remove the extra -1 from the stack
   133 0000012E 9D                      	popf                                                        ;Restore rflags
   134 0000012F 5B                      	pop rbx                                                     ;Restore rbx
   135 00000130 415F                    	pop r15                                                     ;Restore r15
   136 00000132 415E                    	pop r14                                                     ;Restore r14
   137 00000134 415D                    	pop r13                                                     ;Restore r13
   138 00000136 415C                    	pop r12                                                     ;Restore r12
   139 00000138 415B                    	pop r11                                                     ;Restore r11
   140 0000013A 415A                    	pop r10                                                     ;Restore r10
   141 0000013C 4159                    	pop r9                                                      ;Restore r9
   142 0000013E 4158                    	pop r8                                                      ;Restore r8
   143 00000140 59                      	pop rcx                                                     ;Restore rcx
   144 00000141 5A                      	pop rdx                                                     ;Restore rdx
   145 00000142 5E                      	pop rsi                                                     ;Restore rsi
   146 00000143 5F                      	pop rdi                                                     ;Restore rdi
   147 00000144 5D                      	pop rbp                                                     ;Restore rbp
   148                                  
   149                                  
   150 00000145 C3                      	ret                                               	    ;ret returns r13 (Sum of all integers)
   151                                  
   152                                  
   153                                  
   154                                  
