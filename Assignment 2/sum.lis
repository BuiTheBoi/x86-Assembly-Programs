     1                                  ;=====================================================================================================================================
     2                                  ;Program Name: Arrays
     3                                  ;Programming Language: x86 Assembly
     4                                  ;File Description: This takes in the array defined in manager.asm, and current number of items in the array to mock a 
     5                                  ;for loop by traversing through each element to calculate and return the sum of all integers.
     6                                  
     7                                  
     8                                  ;Author: Justin Bui
     9                                  ;Email: Justin_Bui12@csu.fullerton.edu
    10                                  ;Institution: California State University, Fullerton
    11                                  ;Course: CPSC 240-05
    12                                  ;Start Date: 18 September, 2020
    13                                  
    14                                  ;Copyright (C) 2020 Justin Bui
    15                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
    16                                  ;version 3 as published by the Free Software Foundation.
    17                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
    18                                  ;Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
    19                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.
    20                                  ;======================================================================================================================================
    21                                  
    22                                  
    23                                  global doAddition
    24                                  
    25                                  section .data
    26                                  	;Nothing defined in .data
    27                                  
    28                                  section .bss
    29                                  	;Nothing defined in .bss
    30                                  
    31                                  section .text
    32                                  doAddition:
    33                                  
    34                                  	;Back up the general purpose registers for the sole purpose of protecting the data of the caller.
    35 00000000 55                      	push rbp                                                    ;Backup rbp
    36 00000001 4889E5                  	mov  rbp,rsp                                                ;The base pointer now points to top of stack
    37 00000004 57                      	push rdi                                                    ;Backup rdi
    38 00000005 56                      	push rsi                                                    ;Backup rsi
    39 00000006 52                      	push rdx                                                    ;Backup rdx
    40 00000007 51                      	push rcx                                                    ;Backup rcx
    41 00000008 4150                    	push r8                                                     ;Backup r8
    42 0000000A 4151                    	push r9                                                     ;Backup r9
    43 0000000C 4152                    	push r10                                                    ;Backup r10
    44 0000000E 4153                    	push r11                                                    ;Backup r11
    45 00000010 4154                    	push r12                                                    ;Backup r12
    46 00000012 4155                    	push r13                                                    ;Backup r13
    47 00000014 4156                    	push r14                                                    ;Backup r14
    48 00000016 4157                    	push r15                                                    ;Backup r15
    49 00000018 53                      	push rbx                                                    ;Backup rbx
    50 00000019 9C                      	pushf                                                       ;Backup rflags
    51                                  
    52                                  
    53 0000001A 4989F3                  	mov r11, rsi			;Moving current amount in array into r11
    54                                  					;Serves as counter value for the "for loop"
    55 0000001D 4989FE                  	mov r14, rdi			;Moving myArray stored in rdi into r14
    56 00000020 41BF00000000            	mov r15, 0			;Serves as current index
    57 00000026 41BD00000000            	mov r13, 0			;Serves as total
    58                                  
    59                                  mockForLoop:
    60                                  
    61 0000002C 4D39DF                  	cmp r15, r11
    62 0000002F 7F09                    	jg terminateLoop
    63                                  
    64                                  	;r13 = r13 + myArray[r15]
    65 00000031 4F032CFE                	add r13, [r14 + r15 * 8]
    66                                  
    67 00000035 49FFC7                  	inc r15
    68 00000038 EBF2                    	jmp mockForLoop
    69                                  
    70                                  terminateLoop:
    71                                  
    72 0000003A 4C89E8                  	mov rax, r13
    73                                  
    74                                  	;Restore the original values to the general registers before returning to the caller.
    75 0000003D 9D                      	popf
    76 0000003E 5B                      	pop rbx                                                     ;Restore rbx
    77 0000003F 415F                    	pop r15                                                     ;Restore r15
    78 00000041 415E                    	pop r14                                                     ;Restore r14
    79 00000043 415D                    	pop r13                                                     ;Restore r13
    80 00000045 415C                    	pop r12                                                     ;Restore r12
    81 00000047 415B                    	pop r11                                                     ;Restore r11
    82 00000049 415A                    	pop r10                                                     ;Restore r10
    83 0000004B 4159                    	pop r9                                                      ;Restore r9
    84 0000004D 4158                    	pop r8                                                      ;Restore r8
    85 0000004F 59                      	pop rcx                                                     ;Restore rcx
    86 00000050 5A                      	pop rdx                                                     ;Restore rdx
    87 00000051 5E                      	pop rsi                                                     ;Restore rsi
    88 00000052 5F                      	pop rdi                                                     ;Restore rdi
    89 00000053 5D                      	pop rbp                                                     ;Restore rbp
    90                                  
    91 00000054 C3                      	ret                                               ;Pop the integer stack and jump to the address represented by the popped value.
    92                                  
