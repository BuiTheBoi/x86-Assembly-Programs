     1                                  ;=====================================================================================================================================
     2                                  ;Program Name: Arrays
     3                                  ;Programming Language: x86 Assembly
     4                                  ;File Description: This file asks the user to input as many integers in the array. User input is then determined whether
     5                                  ;or no the input is an integer type. If so, add it into the array, or do not add it if otherwise. To stop inputting
     6                                  ;values, the user is prompted to press Ctrl+D. If the array is full, the program automatically stops the user from doing so
     7                                  ;and moves on.
     8                                  
     9                                  
    10                                  ;Author: Justin Bui
    11                                  ;Email: Justin_Bui12@csu.fullerton.edu
    12                                  ;Institution: California State University, Fullerton
    13                                  ;Course: CPSC 240-05
    14                                  ;Start Date: 18 September, 2020
    15                                  
    16                                  ;Copyright (C) 2020 Justin Bui
    17                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
    18                                  ;version 3 as published by the Free Software Foundation.
    19                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
    20                                  ;Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
    21                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.
    22                                  ;======================================================================================================================================
    23                                  
    24                                  extern scanf
    25                                  extern printf
    26                                  extern isinteger			;From isinteger.asm
    27                                  extern atolong				;From atol.asm
    28                                  extern printArray
    29                                  global takeInput
    30                                  
    31                                  section .data
    32 00000000 256C640A00              	integerOutputFormat db "%ld", 10, 0
    33 00000005 257300                  	stringOutputFormat db "%s", 0
    34 00000008 436F6E74726F6C2044-     	controlDPressed db "Control D is pressed.", 10, 0
    34 00000011 206973207072657373-
    34 0000001A 65642E0A00         
    35 0000001F 596F75206861766520-     	overloadStatement db "You have reached the maximum elements in the array.", 10, 0
    35 00000028 726561636865642074-
    35 00000031 6865206D6178696D75-
    35 0000003A 6D20656C656D656E74-
    35 00000043 7320696E2074686520-
    35 0000004C 61727261792E0A00   
    36 00000054 546865206C61737420-     	invalidType db "The last input was invalid and not entered into the array.", 10, 0
    36 0000005D 696E70757420776173-
    36 00000066 20696E76616C696420-
    36 0000006F 616E64206E6F742065-
    36 00000078 6E746572656420696E-
    36 00000081 746F20746865206172-
    36 0000008A 7261792E0A00       
    37                                  
    38                                  section .bss
    39                                  	;Nothing declared inside .bss
    40                                  
    41                                  section .text
    42                                  takeInput:
    43                                  
    44 00000000 55                      	push rbp                                                    ;Backup rbp
    45 00000001 4889E5                  	mov rbp, rsp                                                ;The base pointer now points to top of stack
    46 00000004 57                      	push rdi                                                    ;Backup rdi
    47 00000005 56                      	push rsi                                                    ;Backup rsi
    48 00000006 52                      	push rdx                                                    ;Backup rdx
    49 00000007 51                      	push rcx                                                    ;Backup rcx
    50 00000008 4150                    	push r8							    						;Backup r8
    51 0000000A 4151                    	push r9                                                     ;Backup r9
    52 0000000C 4152                    	push r10                                                    ;Backup r10
    53 0000000E 4153                    	push r11                                                    ;Backup r11
    54 00000010 4154                    	push r12                                                    ;Backup r12
    55 00000012 4155                    	push r13                                                    ;Backup r13
    56 00000014 4156                    	push r14                                                    ;Backup r14
    57 00000016 4157                    	push r15                                                    ;Backup r15
    58 00000018 53                      	push rbx                                                    ;Backup rbx
    59                                  
    60 00000019 4989FE                  	mov r14, rdi		;r14 has the pointer to the array in manager.asm
    61 0000001C 4989F5                  	mov r13, rsi		;r13 holds array capacity stored in rsi
    62 0000001F 41BC00000000            	mov r12, 0		;r12 represents current index of array
    63                                  
    64                                  startOfLoop:
    65                                  
    66                                  	;Taking user inputs
    67 00000025 B800000000              	mov qword rax, 0
    68 0000002A 48BF-                   	mov rdi, stringOutputFormat
    68 0000002C [0500000000000000] 
    69 00000034 6A00                    	push qword 0			;Pushing arbitrary quadword into the stack
    70 00000036 4889E6                  	mov rsi, rsp
    71 00000039 E8(00000000)            	call scanf
    72                                  
    73                                  inputValidations:
    74                                  
    75                                  	;Checks for ctrl+D
    76 0000003E 4898                    	cdqe				;Converts all rax from 32 --> 64 bits
    77 00000040 4883F8FF                	cmp rax, -1			;r15 is given -1 if user presses ctrl+D
    78 00000044 747A                    	je ctrlD			;Exiting the loop if rax = -1 (When ctrl+D is pressed)
    79                                  
    80                                  	;Checks if user input is an integer
    81 00000046 B800000000              	mov qword rax, 0
    82 0000004B 4889E7                  	mov rdi, rsp			;Passing user input (Stored in rsp) into isinteger
    83 0000004E E8(00000000)            	call isinteger			;If user input is integer, return 1, else return 0
    84 00000053 4883F800                	cmp rax, 0				;Sees if user input is not int type
    85 00000057 7420                    	je notAnInt
    86                                  
    87                                  	;Converts any strings --> integer
    88 00000059 B800000000              	mov qword rax, 0
    89 0000005E 4889E7                  	mov rdi, rsp			;Passing user input stored in rsp into atolong
    90 00000061 E8(00000000)            	call atolong
    91 00000066 4989C3                  	mov r11, rax			;Storing processeed value into r11
    92 00000069 4158                    	pop r8
    93                                  
    94 0000006B 4F891CE6                	mov [r14 + r12 * 8], r11	;Stores user input (r11) into myArray (r14) from manager.asm
    95 0000006F 49FFC4                  	inc r12						;Increments r12 to move to next address in myArray
    96                                  
    97                                  	;Checks if array is full
    98 00000072 4D39EC                  	cmp r12, r13			;Compares if current index exceeds max index
    99 00000075 7424                    	je overload			;Exit the program if current amount = capacity (i.e array is full)
   100                                  
   101 00000077 EBAC                    	jmp startOfLoop			;If current amount < capacity, and Ctrl+D is not pressed, then restart loop
   102                                  
   103                                  notAnInt:
   104                                  
   105                                  	;Tells user of invalid input. Loops back to start of loop to try again.
   106 00000079 B800000000              	mov rax, 0
   107 0000007E 48BF-                   	mov rdi, stringOutputFormat
   107 00000080 [0500000000000000] 
   108 00000088 48BE-                   	mov rsi, invalidType
   108 0000008A [5400000000000000] 
   109 00000092 E8(00000000)            	call printf
   110 00000097 4158                    	pop r8
   111 00000099 EB8A                    	jmp startOfLoop
   112                                  
   113                                  overload:
   114                                  
   115                                  	;Tells user they put too much elements in array
   116 0000009B B800000000              	mov rax, 0
   117 000000A0 48BF-                   	mov rdi, stringOutputFormat
   117 000000A2 [0500000000000000] 
   118 000000AA 48BE-                   	mov rsi, overloadStatement
   118 000000AC [1F00000000000000] 
   119 000000B4 6819FCFFFF              	push qword -999
   120 000000B9 E8(00000000)            	call printf
   121 000000BE EB20                    	jmp exitProgram
   122                                  
   123                                  ctrlD:
   124                                  
   125                                  	;Tells user that control + D is pressed
   126 000000C0 B800000000              	mov rax, 0
   127 000000C5 48BF-                   	mov rdi, stringOutputFormat
   127 000000C7 [0500000000000000] 
   128 000000CF 48BE-                   	mov rsi, controlDPressed
   128 000000D1 [0800000000000000] 
   129 000000D9 E8(00000000)            	call printf
   130 000000DE EB00                    	jmp exitProgram
   131                                  
   132                                  exitProgram:
   133                                  
   134                                  
   135 000000E0 4C89E0                  	mov qword rax, r12				;Backing up r12 into rax to be returned
   136                                  
   137                                  	;Popping all of registers in reverse order as pushes
   138 000000E3 5B                      	pop rbx                                                     ;Restore rbx
   139 000000E4 415F                    	pop r15                                                     ;Restore r15
   140 000000E6 415E                    	pop r14                                                     ;Restore r14
   141 000000E8 415D                    	pop r13                                                     ;Restore r13
   142 000000EA 415C                    	pop r12                                                     ;Restore r12
   143 000000EC 415B                    	pop r11                                                     ;Restore r11
   144 000000EE 415A                    	pop r10                                                     ;Restore r10
   145 000000F0 4159                    	pop r9                                                      ;Restore r9
   146 000000F2 4158                    	pop r8							    ;Restore r8
   147 000000F4 59                      	pop rcx                                                     ;Restore rcx
   148 000000F5 5A                      	pop rdx                                                     ;Restore rdx
   149 000000F6 5E                      	pop rsi                                                     ;Restore rsi
   150 000000F7 5F                      	pop rdi                                                     ;Restore rdi
   151 000000F8 5D                      	pop rbp                                                     ;Restore rbp
   152 000000F9 5B                      	pop rbx
   153                                  
   154 000000FA C3                      	ret                                               ;Returning current number of items in array
   155                                  
